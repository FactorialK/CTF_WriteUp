#!/usr/bin/python3
from Crypto.Util.number import long_to_bytes
from gmpy2 import iroot

n = 107988476943178896740559481786452827247037739063593116450897158289855775203312505218465160792832035818980833106660098075833902161124269748637049461194351575034323829715212487413958189823359573364470456164660169077267645400306125474364447401987045485872696665462982255354544213338198072707043036702944830888651
e = 81171113107910864876043482463025848364915101273483437209344034030581728578481084903863564071064166940502516992531531054663652575419409121457771067829856382105311604781773030967384891910024624729321918931972882951531843945634588917306937613785687347830804107189615063842075062457317765619077726631778363306207
c = 28485673208589165841250163653297388921301673801458951790692960929649349971361220970114547642734285429482858053680920093379846402940119278947600794941333914918882566245400912538332182187331619477563443007829511193796308458054432795410985501123758110061387988538004682148504178758829523739527100313502308071694

def cf_expansion(n, d):
    e = []

    q = n // d
    r = n % d
    e.append(q)

    while r != 0:
        n, d = d, r
        q = n // d
        r = n % d
        e.append(q)

    return e

def convergents(e):
    n = [] # Nominators
    d = [] # Denominators

    for i in range(len(e)):
        if i == 0:
            ni = e[i]
            di = 1
        elif i == 1:
            ni = e[i]*e[i-1] + 1
            di = e[i]
        else: # i > 1
            ni = e[i]*n[i-1] + n[i-2]
            di = e[i]*d[i-1] + d[i-2]

        n.append(ni)
        d.append(di)
        yield (ni, di)

def solve(phi, n):
    b = (phi - n - 1)
    D = iroot(pow(phi - n - 1, 2)-4*n, 2)[0]
    return ((-b +  D) // 2, (-b - D) // 2)

exp_lst = cf_expansion(e, n)
for i in convergents(exp_lst):
    k, d = i
    if(k == 0):
        continue
    
    phi = e*d//k
    p, q = solve(phi, n)
    if(p*q == n):
        print(long_to_bytes(pow(c, d, n)))
        break